/*
THIS IS A GENERATED/BUNDLED FILE BY ESBUILD
if you want to view the source, please visit the github repository of this plugin
*/

var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __export = (target, all) => {
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: true });
};
var __copyProps = (to, from, except, desc) => {
  if (from && typeof from === "object" || typeof from === "function") {
    for (let key of __getOwnPropNames(from))
      if (!__hasOwnProp.call(to, key) && key !== except)
        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
  }
  return to;
};
var __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);

// main.ts
var main_exports = {};
__export(main_exports, {
  default: () => CPMGanttPlugin
});
module.exports = __toCommonJS(main_exports);
var import_obsidian5 = require("obsidian");

// src/views/CPMView.ts
var import_obsidian4 = require("obsidian");

// src/models/tasks.ts
var Task = class {
  constructor(id, name, responsible, duration, dependency = []) {
    this.id = id;
    this.name = name;
    this.responsible = responsible;
    this.duration = duration;
    this.dependency = dependency;
    this.earlyStart = 0;
    this.earlyFinish = 0;
    this.lateFinish = 0;
    this.lateStart = 0;
    this.slack = 0;
    this.isCritical = false;
  }
  createNode(i) {
    let node = {
      id: `${this.id}`,
      type: "text",
      text: `[[${this.name}]]`,
      x: `${this.earlyStart * 130}`,
      y: `${i * 50}`,
      width: `${this.duration * 130} `,
      height: 50,
      color: `${this.isCritical ? 1 : 5}`
    };
    return node;
  }
  // Gera arestas para TODAS as dependências desta tarefa
  createEdges() {
    const edges = [];
    for (const depTask of this.dependency) {
      edges.push({
        id: `edge-${depTask.id}-to-${this.id}`,
        // ID da aresta mais específico
        fromNode: `${depTask.id}`,
        fromSide: "right",
        toNode: `${this.id}`,
        toSide: "left"
      });
    }
    return edges;
  }
};

// src/controllers/drawGanttController.ts
function drawGantt(tasks, maxEndDate, chartContainer) {
  chartContainer.innerHTML = "";
  const chartWidth = 500;
  const scale = chartWidth / (maxEndDate || 1);
  const barHeight = 20;
  const rowHeight = 30;
  chartContainer.setAttribute("height", (tasks.length * rowHeight + 20).toString());
  for (let i = 0; i <= maxEndDate; i++) {
    const text = document.createElementNS("http://www.w3.org/2000/svg", "text");
    text.setAttribute("x", (i * scale).toString());
    text.setAttribute("y", "15");
    text.setAttribute("font-size", "12");
    text.setAttribute("fill", "#333");
    text.textContent = i.toString();
    chartContainer.appendChild(text);
  }
  tasks.forEach((task, index) => {
    const x = (task.earlyStart || 0) * scale;
    const y = index * rowHeight + 10;
    const width = (task.duration || 0) * scale;
    const rect = document.createElementNS("http://www.w3.org/2000/svg", "rect");
    rect.setAttribute("x", x.toString());
    rect.setAttribute("y", y.toString());
    rect.setAttribute("width", width.toString());
    rect.setAttribute("height", barHeight.toString());
    rect.setAttribute("fill", task.isCritical ? "#ef4444" : "#3b82f6");
    rect.setAttribute("rx", "5");
    chartContainer.appendChild(rect);
    const label = document.createElementNS("http://www.w3.org/2000/svg", "text");
    label.setAttribute("x", (x + 5).toString());
    label.setAttribute("y", (y + barHeight / 2 + 5).toString());
    label.setAttribute("fill", "white");
    label.setAttribute("font-size", "12");
    label.textContent = task.name;
    chartContainer.appendChild(label);
  });
}

// src/controllers/calculateCPMcontroller.ts
function calculateCPM(taskList) {
  taskList.forEach((task) => {
    task.earlyStart = 0;
    task.earlyFinish = 0;
    task.lateStart = 0;
    task.lateFinish = 0;
    task.slack = 0;
    task.isCritical = false;
  });
  taskList.forEach((task) => {
    if (task.dependency.length > 0) {
      const maxPredecessorEF = Math.max(0, ...task.dependency.map((dep) => {
        const predecessor = taskList.find((p) => p.id === dep.id);
        return (predecessor == null ? void 0 : predecessor.earlyFinish) || 0;
      }));
      task.earlyStart = maxPredecessorEF;
    } else {
      task.earlyStart = 0;
    }
    task.earlyFinish = (task.earlyStart || 0) + task.duration;
  });
  let maxEndDate = 0;
  taskList.forEach((task) => {
    if (task.earlyFinish !== void 0) {
      maxEndDate = Math.max(maxEndDate, task.earlyFinish);
    }
  });
  [...taskList].reverse().forEach((task) => {
    const successors = taskList.filter(
      (successor) => successor.dependency.some((dep) => dep.id === task.id)
    );
    if (successors.length > 0) {
      task.lateFinish = Math.min(...successors.map((s) => s.lateStart === void 0 ? Infinity : s.lateStart));
    } else {
      task.lateFinish = maxEndDate;
    }
    task.lateStart = (task.lateFinish === void 0 ? maxEndDate : task.lateFinish) - task.duration;
    task.slack = (task.lateStart || 0) - (task.earlyStart || 0);
    task.isCritical = task.slack === 0;
    if (Object.is(task.slack, -0))
      task.slack = 0;
    task.isCritical = task.slack === 0;
  });
  return { tasks: taskList, maxEndDate };
}

// src/controllers/saveToCanvasController.ts
var import_obsidian = require("obsidian");
async function saveToCanvas(tasks, app) {
  const activeFile = app.workspace.getActiveFile();
  if (!activeFile) {
    new import_obsidian.Notice("\u26A0\uFE0F Nenhuma nota ativa. N\xE3o \xE9 poss\xEDvel salvar o canvas.");
    return;
  }
  const canvasFileName = `${activeFile.basename}Gantt.canvas`;
  const folderPath = activeFile.parent ? activeFile.parent.path : "";
  const newCanvasFilePath = (0, import_obsidian.normalizePath)(`${folderPath}/${canvasFileName}`);
  let canvasData = {
    nodes: [],
    edges: []
  };
  let totalDays = 0;
  for (let i = 0; i < tasks.length; i++) {
    const task = tasks[i];
    if (task.earlyFinish > totalDays) {
      totalDays = task.earlyFinish;
    }
    if (task.earlyStart !== void 0) {
      let node = task.createNode(i);
      canvasData.nodes.push(node);
      if (task.dependency && task.dependency.length > 0) {
        const newEdges = task.createEdges();
        canvasData.edges.push(...newEdges);
      }
    }
  }
  for (let i = 0; i < totalDays; i++) {
    const day = {
      id: `day-${i + 1}`,
      type: "text",
      text: `${i + 1}`,
      x: `${i * 130}`,
      y: -120,
      width: 130,
      height: 50
    };
    canvasData.nodes.push(day);
  }
  const canvasContent = JSON.stringify(canvasData, null, 2);
  try {
    const existingFile = app.vault.getAbstractFileByPath(newCanvasFilePath);
    if (existingFile && existingFile instanceof import_obsidian.TFile) {
      await app.vault.modify(existingFile, canvasContent);
      new import_obsidian.Notice(`\u2705 Canvas "${canvasFileName}" atualizado na pasta da nota!`);
    } else {
      await app.vault.create(newCanvasFilePath, canvasContent);
      new import_obsidian.Notice(`\u2705 Canvas "${canvasFileName}" criado na pasta da nota!`);
      if (activeFile) {
        const linkInterno = `

![[${canvasFileName}]]
`;
        try {
          await app.vault.append(activeFile, linkInterno);
          new import_obsidian.Notice("\u2705 Link para o Canvas inserido na nota!");
        } catch (erro) {
          console.error("Erro ao inserir link do canvas na nota:", erro);
          new import_obsidian.Notice("\u274C Erro ao inserir link do canvas na nota.");
        }
      }
    }
  } catch (error) {
    console.error("Erro ao salvar/atualizar arquivo canvas:", error);
    new import_obsidian.Notice(`\u274C Erro ao salvar/atualizar o arquivo canvas: ${error.message}`);
  }
}

// src/controllers/insertTableInNoteController.ts
var import_obsidian2 = require("obsidian");
async function insertTableInNote(tasks, app) {
  const activeFile = app.workspace.getActiveFile();
  if (!activeFile) {
    new import_obsidian2.Notice("\u26A0\uFE0F Nenhuma nota aberta.");
    return;
  }
  if (!tasks || tasks.length === 0) {
    new import_obsidian2.Notice("\u26A0\uFE0F Nenhuma tarefa para inserir.");
    return;
  }
  const headers = ["ID", "Nome", "Dura\xE7\xE3o", "Depend\xEAncia", "Respons\xE1vel", "In\xEDcio", "Fim", "Slack", "Cr\xEDtica"];
  let markdown = "| " + headers.join(" | ") + " |\n";
  markdown += "|---|---|---|---|---|---|---|---|---|\n";
  tasks.forEach((task) => {
    var _a, _b;
    const dependencyNames = task.dependency.map((d) => `[[${d.name}]]`).join(", ") || "-";
    const responsibleName = task.responsible ? `[[${task.responsible}]]` : "-";
    markdown += `| ${task.id} | [[${task.name}]] | ${task.duration} | ${dependencyNames} | ${responsibleName} | ${task.earlyStart + 1} | ${(_a = task.earlyFinish) != null ? _a : "-"} | ${(_b = task.slack) != null ? _b : "-"} | ${task.isCritical ? "Sim" : "N\xE3o"} |
`;
  });
  try {
    await app.vault.append(activeFile, `
${markdown}
`);
    new import_obsidian2.Notice("\u2705 Tabela em Markdown inserida com sucesso!");
  } catch (err) {
    console.error("Erro ao inserir na nota:", err);
    new import_obsidian2.Notice("\u274C Erro ao inserir tabela na nota.");
  }
}

// src/repository/repository.ts
var import_obsidian3 = require("obsidian");
var TaskRepository = class {
  static async readTasksFromJson(app, filename) {
    try {
      const activeFile = app.workspace.getActiveFile();
      const folderPath = (activeFile == null ? void 0 : activeFile.parent) ? activeFile.parent.path : "";
      const filePath = (0, import_obsidian3.normalizePath)(`${folderPath}/${filename}`);
      if (!await app.vault.adapter.exists(filePath)) {
        new import_obsidian3.Notice(`Arquivo ${filename} n\xE3o encontrado na pasta da nota ativa.`);
        console.log(`Arquivo n\xE3o encontrado: ${filePath}`);
        return [];
      }
      const fileContent = await app.vault.adapter.read(filePath);
      const rawTasks = JSON.parse(fileContent);
      new import_obsidian3.Notice(`Arquivo ${filename} carregado com ${rawTasks.length} tarefas.`);
      const tasks = rawTasks.map((rawTask) => {
        const task = new Task(
          rawTask.id,
          rawTask.name,
          rawTask.responsible,
          rawTask.duration
        );
        task.earlyStart = rawTask.earlyStart;
        task.earlyFinish = rawTask.earlyFinish;
        task.lateFinish = rawTask.lateFinish;
        task.lateStart = rawTask.lateStart;
        task.slack = rawTask.slack;
        task.isCritical = rawTask.isCritical;
        return task;
      });
      const taskMap = new Map(tasks.map((task) => [task.id, task]));
      tasks.forEach((task) => {
        const rawTask = rawTasks.find((rt) => rt.id === task.id);
        if ((rawTask == null ? void 0 : rawTask.dependency) && typeof rawTask.dependency === "object" && rawTask.dependency.id !== void 0) {
          task.dependency = taskMap.get(rawTask.dependency.id) || null;
        } else if (typeof (rawTask == null ? void 0 : rawTask.dependency) === "number") {
          task.dependency = taskMap.get(rawTask.dependency) || null;
        } else {
          task.dependency = null;
        }
      });
      return tasks;
    } catch (error) {
      new import_obsidian3.Notice(`Erro ao ler ou analisar o arquivo ${filename}: ${error.message}`);
      console.error(`Erro ao ler ou analisar o arquivo JSON (${filename}):`, error);
      return [];
    }
  }
  static async saveTasksToJson(app, filename, tasks) {
    try {
      const activeFile = app.workspace.getActiveFile();
      const folderPath = (activeFile == null ? void 0 : activeFile.parent) ? activeFile.parent.path : "";
      const filePath = (0, import_obsidian3.normalizePath)(`${folderPath}/${filename}`);
      const rawTasksToSave = tasks.map((task) => ({
        id: task.id,
        name: task.name,
        responsible: task.responsible,
        duration: task.duration,
        dependency: task.dependency ? task.dependency.id : null,
        earlyStart: task.earlyStart,
        earlyFinish: task.earlyFinish,
        lateFinish: task.lateFinish,
        lateStart: task.lateStart,
        slack: task.slack,
        isCritical: task.isCritical
      }));
      const jsonString = JSON.stringify(rawTasksToSave, null, 2);
      await app.vault.adapter.write(filePath, jsonString);
      new import_obsidian3.Notice(`Tarefas salvas em ${filename} (${tasks.length} tarefas).`);
    } catch (error) {
      new import_obsidian3.Notice(`Erro ao salvar tarefas em ${filename}: ${error.message}`);
      console.error(`Erro ao salvar tarefas no arquivo JSON (${filename}):`, error);
    }
  }
};

// src/views/CPMView.ts
var CPM_VIEW_TYPE = "cpm-view";
var CPMView = class extends import_obsidian4.ItemView {
  // EN: Returns the view type.
  // PT-BR: Retorna o tipo da visualização.
  getViewType() {
    return CPM_VIEW_TYPE;
  }
  getDisplayText() {
    return "CPM - Caminho Cr\xEDtico";
  }
  // EN: Returns the icon for the view tab.
  // PT-BR: Retorna o ícone para a aba da visualização.
  getIcon() {
    return "chart-gantt";
  }
  async onOpen() {
    this.container = this.containerEl.children[1];
    this.container.empty();
    await this.renderCPMInterface();
  }
  // EN: Renders the main interface for the CPM tool.
  // PT-BR: Renderiza a interface principal para a ferramenta CPM.
  renderCPMInterface() {
    this.container.empty();
    const style = document.createElement("style");
    style.textContent = this.getStyleCSS();
    this.container.appendChild(style);
    this.container.createEl("h4", { text: "M\xE9todo do Caminho Cr\xEDtico" });
    const form = this.container.createEl("form", { cls: "task-form" });
    form.innerHTML = `
      <input type="number" id="id" placeholder="ID" required />
      <input type="text" id="name" placeholder="Nome" required />
      <input type="number" id="duration" placeholder="Dura\xE7\xE3o" required />
      <input type="text" id="dependency" placeholder="Depend\xEAncias (IDs, ex: 1,2)" />
      <input type="text" id="responsible" placeholder="Respons\xE1vel" />
      <button type="submit">Adicionar Tarefa</button>
    `;
    const table = this.container.createEl("table");
    table.id = "tasks-table";
    table.innerHTML = `
      <thead>
        <tr>
          <th>ID</th><th>Nome</th><th>Dura\xE7\xE3o</th><th>Depend\xEAncia</th><th>Respons\xE1vel</th>
          <th>In\xEDcio</th><th>Fim</th><th>Slack</th><th>Cr\xEDtica</th><th>A\xE7\xF5es</th>
        </tr>
      </thead>
      <tbody></tbody>
    `;
    const actionsDiv = this.container.createDiv({ cls: "action-buttons" });
    actionsDiv.createEl("button", { text: "Inserir Tabela na nota", attr: { id: "insert-md-table" } });
    actionsDiv.createEl("button", { text: "Salvar para Canvas", attr: { id: "save-canvas-btn" } });
    const ganttWrapper = this.container.createEl("div");
    ganttWrapper.id = "gantt-wrapper";
    ganttWrapper.style.marginTop = "20px";
    ganttWrapper.style.overflowX = "auto";
    ganttWrapper.style.height = "300px";
    ganttWrapper.style.border = "1px solid #ddd";
    const ganttChart = document.createElementNS("http://www.w3.org/2000/svg", "svg");
    ganttChart.setAttribute("id", "gantt-chart");
    ganttChart.setAttribute("width", "100%");
    ganttChart.setAttribute("height", "auto");
    ganttWrapper.appendChild(ganttChart);
    this.setupEventListeners(ganttChart, table.querySelector("tbody"));
  }
  // EN: Sets up event listeners for form submission, button clicks, and table interactions.
  // PT-BR: Configura os ouvintes de eventos para submissão de formulário, cliques em botões e interações na tabela.
  async setupEventListeners(ganttChart, tbody) {
    const form = this.container.querySelector(".task-form");
    const insertMdBtn = this.container.querySelector("#insert-md-table");
    const saveCanvasBtn = this.container.querySelector("#save-canvas-btn");
    const dbFileName = "db.json";
    const idInput = form.querySelector("#id");
    const nameInput = form.querySelector("#name");
    const durationInput = form.querySelector("#duration");
    const dependencyInput = form.querySelector("#dependency");
    const responsibleInput = form.querySelector("#responsible");
    const submitButton = form.querySelector("button[type='submit']");
    const updateTasks = async () => {
      if (tasks.length === 0) {
        tbody.innerHTML = "<tr><td colspan='9'>Nenhuma tarefa adicionada ou carregada.</td></tr>";
        drawGantt([], 0, ganttChart);
        try {
          await TaskRepository.saveTasksToJson(this.app, dbFileName, tasks);
        } catch (error) {
          console.error("Erro ao salvar lista de tarefas vazia:", error);
        }
        try {
          await saveToCanvas(tasks, this.app);
        } catch (error) {
          console.error("Erro ao salvar canvas com lista vazia:", error);
        }
        return;
      }
      const { tasks: calculatedTasks, maxEndDate } = calculateCPM(tasks);
      tbody.innerHTML = "";
      calculatedTasks.forEach((task) => {
        const tr = document.createElement("tr");
        tr.innerHTML = `
          <td>${task.id}</td>
          <td>${task.name}</td>
          <td>${task.duration}</td>
          <td>${task.dependency.map((dep) => dep.name).join(", ") || "-"}</td>
          <td>${task.responsible}</td>
          <td>${task.earlyStart + 1}</td>
          <td>${task.earlyFinish}</td>
          <td>${task.slack}</td>
          <td>${task.isCritical ? "Sim" : "N\xE3o"}</td>
          <td>
            <button class="edit-task-btn" data-task-id="${task.id}" title="Editar Tarefa">\u270F\uFE0F</button>
            <button class="delete-task-btn" data-task-id="${task.id}" title="Apagar Tarefa">\u{1F5D1}\uFE0F</button>
          </td>
        `;
        tbody.appendChild(tr);
      });
      drawGantt(calculatedTasks, maxEndDate, ganttChart);
      try {
        await TaskRepository.saveTasksToJson(this.app, dbFileName, tasks);
      } catch (error) {
        console.error("Erro ao salvar tarefas ap\xF3s atualiza\xE7\xE3o:", error);
        new import_obsidian4.Notice("Falha ao salvar as tarefas automaticamente.");
      }
    };
    let tasks = [];
    try {
      tasks = await TaskRepository.readTasksFromJson(this.app, dbFileName);
      updateTasks();
    } catch (error) {
      console.error("Erro ao carregar tarefas do arquivo:", error);
    }
    let editingTaskId = null;
    const startEditTask = (taskIdToEdit) => {
      const taskToEdit = tasks.find((task) => task.id === taskIdToEdit);
      if (!taskToEdit)
        return;
      editingTaskId = taskIdToEdit;
      idInput.value = taskToEdit.id.toString();
      idInput.readOnly = true;
      nameInput.value = taskToEdit.name;
      durationInput.value = taskToEdit.duration.toString();
      dependencyInput.value = taskToEdit.dependency.map((dep) => dep.id).join(",");
      responsibleInput.value = taskToEdit.responsible;
      submitButton.textContent = "Atualizar Tarefa";
      form.scrollIntoView({ behavior: "smooth" });
    };
    const deleteTask = (taskIdToDelete) => {
      if (!confirm(`Tem certeza que deseja apagar a tarefa ID ${taskIdToDelete}? As tarefas que dependem dela perder\xE3o essa depend\xEAncia.`)) {
        return;
      }
      tasks = tasks.filter((task) => task.id !== taskIdToDelete);
      tasks.forEach((task) => {
        task.dependency = task.dependency.filter((dep) => dep.id !== taskIdToDelete);
      });
      updateTasks();
      new import_obsidian4.Notice(`\u{1F5D1}\uFE0F Tarefa ID ${taskIdToDelete} apagada.`);
    };
    tbody.addEventListener("click", (event) => {
      const target = event.target;
      const button = target.closest("button");
      if (!button)
        return;
      const taskIdAttr = button.dataset.taskId;
      if (taskIdAttr) {
        const taskId = parseInt(taskIdAttr);
        if (button.classList.contains("edit-task-btn")) {
          startEditTask(taskId);
        } else if (button.classList.contains("delete-task-btn")) {
          deleteTask(taskId);
        }
      }
    });
    form.addEventListener("submit", (e) => {
      e.preventDefault();
      const currentIdStr = idInput.value;
      const name = nameInput.value.trim();
      const durationStr = durationInput.value;
      const dependencyIDInput = dependencyInput.value.trim();
      const responsible = responsibleInput.value.trim() || "";
      const duration = parseInt(durationStr);
      if (!name || isNaN(duration) || duration <= 0) {
        new import_obsidian4.Notice("\u26A0\uFE0F Dados inv\xE1lidos. Nome e Dura\xE7\xE3o (positiva) s\xE3o obrigat\xF3rios.");
        return;
      }
      const currentId = parseInt(currentIdStr);
      const dependencyIDs = dependencyIDInput ? dependencyIDInput.split(",").map((id) => parseInt(id.trim())).filter((id) => !isNaN(id)) : [];
      let dependencyTasks = [];
      if (dependencyIDs.length > 0) {
        for (const depId of dependencyIDs) {
          if (depId === currentId && editingTaskId === null) {
            new import_obsidian4.Notice(`\u26A0\uFE0F Uma tarefa n\xE3o pode depender de si mesma (ID ${currentId}).`);
            return;
          }
          if (editingTaskId !== null && depId === editingTaskId) {
            new import_obsidian4.Notice(`\u26A0\uFE0F Uma tarefa n\xE3o pode depender de si mesma (ID ${editingTaskId}).`);
            return;
          }
          const foundDep = tasks.find((t) => t.id === depId);
          if (!foundDep) {
            new import_obsidian4.Notice(`\u26A0\uFE0F Depend\xEAncia com ID ${depId} n\xE3o encontrada.`);
            return;
          }
          dependencyTasks.push(foundDep);
        }
      }
      if (editingTaskId !== null) {
        const taskToUpdate = tasks.find((task) => task.id === editingTaskId);
        if (taskToUpdate) {
          taskToUpdate.name = name;
          taskToUpdate.duration = duration;
          taskToUpdate.responsible = responsible;
          taskToUpdate.dependency = dependencyTasks;
          new import_obsidian4.Notice(`\u2705 Tarefa ID ${editingTaskId} atualizada.`);
        }
        editingTaskId = null;
        idInput.readOnly = false;
        submitButton.textContent = "Adicionar Tarefa";
      } else {
        if (isNaN(currentId) || currentId <= 0) {
          new import_obsidian4.Notice("\u26A0\uFE0F ID da tarefa inv\xE1lido. Deve ser um n\xFAmero positivo.");
          return;
        }
        if (tasks.some((t) => t.id === currentId)) {
          new import_obsidian4.Notice(`\u26A0\uFE0F J\xE1 existe uma tarefa com o ID ${currentId}.`);
          return;
        }
        tasks.push(new Task(currentId, name, responsible, duration, dependencyTasks));
        new import_obsidian4.Notice("\u2705 Tarefa adicionada.");
      }
      updateTasks();
      form.reset();
    });
    insertMdBtn == null ? void 0 : insertMdBtn.addEventListener("click", () => {
      if (tasks.length === 0) {
        new import_obsidian4.Notice("\u26A0\uFE0F Nenhuma tarefa para exportar.");
        return;
      }
      insertTableInNote(tasks, this.app);
    });
    saveCanvasBtn == null ? void 0 : saveCanvasBtn.addEventListener("click", () => {
      if (!this.app.workspace.getActiveFile()) {
        new import_obsidian4.Notice("\u26A0\uFE0F Nenhuma nota ativa para salvar o canvas.");
        return;
      }
      saveToCanvas(tasks, this.app);
    });
  }
  // EN: Returns the CSS styles for the view.
  // PT-BR: Retorna os estilos CSS para a visualização.
  getStyleCSS() {
    return `
      body { font-family: sans-serif; padding: 10px; }
      input, button { display: block; width: 100%; margin-bottom: 8px; padding: 6px; }
      table { width: 100%; border-collapse: collapse; margin-top: 15px; }
      th, td { border: 1px solid #ccc; padding: 6px; text-align: left; }
      .gantt-container { overflow-x: auto; height: 300px; border: 1px solid #ddd; }
      #gantt-chart { min-width: 1000px; height: auto; }
      .action-buttons { margin-top: 10px; }
      .action-buttons button, .task-form button { margin-right: 5px; display: inline-block; width: auto; }
      #tasks-table button {
          padding: 3px 6px;
          margin: 0 2px;
          font-size: 1em; /* Emojis s\xE3o caracteres, ent\xE3o o tamanho da fonte os afeta */
          cursor: pointer;
          border: none; /* Remove borda padr\xE3o */
          background: none; /* Remove fundo padr\xE3o */
          line-height: 1; /* Para alinhar melhor os emojis */
      }
    `;
  }
};

// main.ts
var CPMGanttPlugin = class extends import_obsidian5.Plugin {
  async onload() {
    this.registerView(CPM_VIEW_TYPE, (leaf) => new CPMView(leaf));
    this.addRibbonIcon("chart-gantt", "Abrir CPM Gantt", () => {
      this.activateView();
    });
  }
  async activateView() {
    this.app.workspace.detachLeavesOfType(CPM_VIEW_TYPE);
    await this.app.workspace.getLeaf("split").setViewState({
      type: CPM_VIEW_TYPE
    });
  }
};
//# sourceMappingURL=data:application/json;base64,
